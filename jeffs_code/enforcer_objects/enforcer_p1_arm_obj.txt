Information about object: enforcer_p1_arm_obj

Sprite: <no sprite>
Solid: false
Visible: true
Depth: 0
Persistent: false
Parent: <no parent>
Mask: <same as sprite>

Create Event:
execute code:

/////////////////////////////////////////////////////
//Initialize player's arm's sprites
//////////Rite side 1st weapon sprites
enforcer_p1_arm_1_hip_idle_left_sprite          = '';
enforcer_p1_arm_1_hip_idle_rite_sprite          = '';
enforcer_p1_arm_1_aim_idle_left_sprite          = '';
enforcer_p1_arm_1_aim_idle_rite_sprite          = '';
enforcer_p1_arm_1_hip_fire_left_sprite          = '';
enforcer_p1_arm_1_hip_fire_rite_sprite          = '';
enforcer_p1_arm_1_aim_fire_left_sprite          = '';
enforcer_p1_arm_1_aim_fire_rite_sprite          = '';
enforcer_p1_arm_1_reload_left_sprite            = '';
enforcer_p1_arm_1_reload_rite_sprite            = '';
enforcer_p1_arm_1_2nd_chance_left_sprite        = '';
enforcer_p1_arm_1_2nd_chance_rite_sprite        = '';
/////////Left side 2nd weapon sprite
enforcer_p1_arm_2_hip_idle_left_sprite          = '';
enforcer_p1_arm_2_hip_idle_rite_sprite          = '';
enforcer_p1_arm_2_aim_idle_left_sprite          = '';
enforcer_p1_arm_2_aim_idle_rite_sprite          = '';
enforcer_p1_arm_2_hip_fire_left_sprite          = '';
enforcer_p1_arm_2_hip_fire_rite_sprite          = '';
enforcer_p1_arm_2_aim_fire_left_sprite          = '';
enforcer_p1_arm_2_aim_fire_rite_sprite          = '';
enforcer_p1_arm_2_reload_left_sprite            = '';
enforcer_p1_arm_2_reload_rite_sprite            = '';
enforcer_p1_arm_2_2nd_chance_left_sprite        = '';
enforcer_p1_arm_2_2nd_chance_rite_sprite        = '';
/////////////////////////////////////////////////////
//PLAYER 1's RIGHT SIDE weapon specs
enforcer_p1_arm_1_firing_speed                  = 0;    //This will affect the arm sprite speed.
enforcer_p1_arm_1_reloading_speed               = 0;    //This will affect the arm sprite speed.
enforcer_p1_arm_1_gunshot_1                     = blank_audio;
enforcer_p1_arm_1_gunshot_2                     = blank_audio;
enforcer_p1_arm_1_gunshot_3                     = blank_audio;
enforcer_p1_arm_1_operate_sound                 = blank_audio;  //Lever, Pump, manual cocking sfx
enforcer_p1_arm_1_operate_particle              = '';           //Incase if it's magazine/clip fed
enforcer_p1_arm_1_operate_particle_x            = 0;
enforcer_p1_arm_1_operate_particle_y            = 0;
enforcer_p1_arm_1_operate_sound_timing          = 0;
enforcer_p1_arm_1_reload_particle               = '';           //Small,large,or shotgun brass
enforcer_p1_arm_1_reload_particle_x             = 0;
enforcer_p1_arm_1_reload_particle_y             = 0;
enforcer_p1_arm_1_reload_particle_timing        = 0;
enforcer_p1_arm_1_gunsmoke_particle             = '';
enforcer_p1_arm_1_gunsmoke_particle_x           = 0;
enforcer_p1_arm_1_gunsmoke_particle_y           = 0;
enforcer_p1_arm_1_reload_sound                  = blank_audio;
enforcer_p1_arm_1_reload_fast_sound             = blank_audio;
enforcer_p1_weapon_1_clip                       = 0;
enforcer_p1_weapon_1_reload_amount              = 0;
enforcer_p1_weapon_1_ammo_using                 = 0;
//enforcer_p1_weapon_1_bullet_obj                 = '';   //Small,large, or pellet
//enforcer_p1_weapon_1_bullet_amount              = '';   //How many times to repeat bullets -> MEANT FOR PELLETS
//enforcer_p1_weapon_1_bullet_speed               = '';   //Bullet speed
//enforcer_p1_weapon_1_clip                       = '';   //How many bullets can the weapon hold?
//enforcer_p1_weapon_1_
//enforcer_p1_weapon_1_bullet_rite_sprite         = '';
//enforcer_p1_weapon_1_bullet_left_sprite         = '';
//////////////////

//PLAYER 1's LEFT SIDE weapon specs
enforcer_p1_arm_2_firing_speed                  = 0;    //This will affect the arm sprite speed.
enforcer_p1_arm_2_reloading_speed               = 0;    //This will affect the arm sprite speed.
enforcer_p1_arm_2_gunshot_1                     = blank_audio;
enforcer_p1_arm_2_gunshot_2                     = blank_audio;
enforcer_p1_arm_2_gunshot_3                     = blank_audio;
enforcer_p1_arm_2_operate_sound                 = blank_audio;  //Lever, Pump, manual cocking sfx
enforcer_p1_arm_2_operate_particle              = '';           //Incase if it's magazine/clip fed
enforcer_p1_arm_2_operate_particle_x            = 0;
enforcer_p1_arm_2_operate_particle_y            = 0;
enforcer_p1_arm_2_operate_sound_timing          = 0;
enforcer_p1_arm_2_reload_particle               = '';           //Small,large,or shotgun brass
enforcer_p1_arm_2_reload_particle_x             = 0;
enforcer_p1_arm_2_reload_particle_y             = 0;
enforcer_p1_arm_2_reload_particle_timing        = 0;
enforcer_p1_arm_2_gunsmoke_particle             = '';
enforcer_p1_arm_2_gunsmoke_particle_x           = 0;
enforcer_p1_arm_2_gunsmoke_particle_y           = 0;
enforcer_p1_arm_2_reload_sound                  = blank_audio;
enforcer_p1_arm_2_reload_fast_sound             = blank_audio;
enforcer_p1_weapon_2_clip                       = 0;
enforcer_p1_weapon_2_reload_amount              = 0;
enforcer_p1_weapon_2_ammo_using                 = 0;
/////////////////////////////////////////////////////
//Now for player's special vars that help animate sprites correctly since we're using Draw event
enforcer_p1_arm_sprite_animated                = false; ///THIS decides if animating the player's arm
enforcer_p1_arm_current_sprite_max_frames      = 0;     ///This counts the number of frames per sprite & acts as a limiter
enforcer_p1_arm_current_sprite_index           = 0;     ///This traverses through the # of frames for sprites
enforcer_p1_arm_current_sprite_draw            = 0;     ///This will be used instead of sprite index
enforcer_p1_arm_sprite_speed                   = 0;     ///This will limit the sprite's animation speed.
enforcer_p1_arm_aim                            = false; ///Is the player aiming?
enforcer_p1_arm_face                           = -1;    ///Accepts left -1 or rite 1
enforcer_p1_weapon_1_reload_check              = false;
enforcer_p1_weapon_2_reload_check              = false;
//////////////////////////////////////
//Populate P1 arm's sprites' vals
enforcer_player_arm_initialize_script(id,1);
///////////////////////////////////////


Alarm Event for alarm 0:
execute code:

////////////////////////////////////////////////////////////////////////////////////////
//This alarm is for playing any sounds. Operation or reloading
////////////////////////////////////////////////////////////////////////////////////////
if(global.enforcer_p1_current_weapon == 1)
    {
        if (enforcer_p1_arm_1_operate_sound_timing != 0)            //If there's an operation sound to be played
            {
                    sound_play(enforcer_p1_arm_1_operate_sound)
            }
    }
///////////////////////////////////////////////////////////////END RITE SIDE OPERATION SOUNDS/PARTICLES
if(global.enforcer_p1_current_weapon == 2)
    {
        if (enforcer_p1_arm_2_operate_sound_timing != 0)
            {
                sound_play(enforcer_p1_arm_2_operate_sound);        //If there's an operation sound to be played
            
            }
    }



Alarm Event for alarm 1:
execute code:

////////////////////////////////////////////////////////////////////////////////////////
//This alarm is for creating any expended brass, whether from reloading or from operation
////////////////////////////////////////////////////////////////////////////////////////
if (enforcer_p1_arm_1_operate_particle_x != 0)       //If there's an expended brass during weapon firing
    {
        if (global.enforcer_p1_current_weapon == 1)
            {
                if (global.enforcer_p1_face_side == 'left')
                {instance_create(x + enforcer_p1_arm_1_operate_particle_x, y + enforcer_p1_arm_1_operate_particle_y,enforcer_p1_arm_1_operate_particle);}
                if (global.enforcer_p1_face_side == 'rite')
                {instance_create(x + enforcer_p1_arm_1_operate_particle_x * -2, y + enforcer_p1_arm_1_operate_particle_y,enforcer_p1_arm_1_operate_particle);}
            }
        if (global.enforcer_p1_current_weapon == 2)
            {
                if (global.enforcer_p1_face_side == 'left')
                {instance_create(x + enforcer_p1_arm_2_operate_particle_x, y + enforcer_p1_arm_2_operate_particle_y,enforcer_p1_arm_2_operate_particle);}
                if (global.enforcer_p1_face_side == 'rite')
                {instance_create(x + enforcer_p1_arm_2_operate_particle_x * -2, y + enforcer_p1_arm_2_operate_particle_y,enforcer_p1_arm_2_operate_particle);}
            }
    }



 Step Event:
execute code:

/////////////////////////////////////////
//Always follow the player's body?
x = enforcer_p1_body_obj.x; y = enforcer_p1_body_obj.y;
//Apperantly the arm object is motionless while the arm sprite isn't.....
/////////////////////////////////////////
///Animate the arm, whether firing or reloading
if(enforcer_p1_arm_sprite_animated == true) && (global.enforcer_p1_is_reloading == false)       //For here, it's just firing
    {
        if(global.enforcer_p1_hip_firing == true)                   //If player is hipfiring 
            {
                enforcer_p1_arm_current_sprite_index += enforcer_p1_arm_1_firing_speed * 1.5;
                if (enforcer_p1_arm_current_sprite_index > enforcer_p1_arm_current_sprite_max_frames - 1 )
                    { 
                        //enforcer_p1_arm_current_sprite_index = enforcer_p1_arm_current_sprite_max_frames;
                        enforcer_p1_arm_sprite_animated = false;
                        global.enforcer_p1_hip_firing = false;
                        if(global.enforcer_p1_face_side == 'left')
                            {
                               // if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_fire_left_sprite)
                                {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_idle_left_sprite; enforcer_p1_arm_current_sprite_index = 0;}
                            }
                        if(global.enforcer_p1_face_side == 'rite')
                            {
                               //if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_fire_rite_sprite)
                                {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_idle_rite_sprite; enforcer_p1_arm_current_sprite_index = 0;}
                            }
                        //enforcer_p1_arm_current_sprite_index = 0;
                        //image_xscale = 1;
                        exit; 
                    }
            }
            /////////////////////////////////////////////////////////Hipfire finished
        if(global.enforcer_p1_aim_firing == true)//If player is aimfiring 
            {
                enforcer_p1_arm_current_sprite_index += enforcer_p1_arm_1_firing_speed;
                if (enforcer_p1_arm_current_sprite_index > enforcer_p1_arm_current_sprite_max_frames - 1 )
                    {  
                        //enforcer_p1_arm_current_sprite_index = enforcer_p1_arm_current_sprite_max_frames;
                        enforcer_p1_arm_sprite_animated = false;
                        global.enforcer_p1_aim_firing = false;
                        
                        if(global.enforcer_p1_face_side == 'left')
                            {
                                //if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_fire_left_sprite)
                                {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_aim_idle_left_sprite; enforcer_p1_arm_current_sprite_index = 0;}
                            }
                        if(global.enforcer_p1_face_side == 'rite')
                            {
                                //if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_fire_rite_sprite)
                                {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_aim_idle_rite_sprite; enforcer_p1_arm_current_sprite_index = 0;}
                            }
                        
                        //////If the player suddenly not holding aim key after the aim fire ends
                        if(enforcer_p1_arm_aim == false)
                            {
                                if(global.enforcer_p1_face_side == 'left')
                                    {
                                        //if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_idle_left_sprite)
                                        {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_idle_left_sprite; enforcer_p1_arm_current_sprite_index = 0;}
                                    }
                                if(global.enforcer_p1_face_side == 'rite')
                                    {
                                        //if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_idle_rite_sprite)
                                        {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_idle_rite_sprite; enforcer_p1_arm_current_sprite_index = 0;}
                                    }
                            }
                        //enforcer_p1_arm_current_sprite_index = 0;
                        //image_xscale = 1;
                        exit;
                    }
            }
            /////////////////////////////////////////////////////////Aimfire finished
    }
//////////////////////ALL FIRING ANIMATION STUFFS IS OVER////////////////////////////////////////////////////////////////
//////////////////////BEGIN RELOADING ANIMATIONS////////////////////////////////////////////////////////////////
if(enforcer_p1_arm_sprite_animated == true) && (global.enforcer_p1_is_reloading == true)
    {
        enforcer_p1_arm_current_sprite_index += enforcer_p1_arm_1_reloading_speed;
        if (enforcer_p1_arm_current_sprite_index > enforcer_p1_arm_current_sprite_max_frames - 1 )
            {
                enforcer_p1_arm_sprite_animated = false;
                global.enforcer_p1_is_reloading = false;
                if(global.enforcer_p1_face_side == 'left')
                    {
                        if(enforcer_p1_arm_aim == true)
                                {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_aim_idle_left_sprite; enforcer_p1_arm_current_sprite_index = 0;}
                        if(enforcer_p1_arm_aim == false)
                                {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_idle_left_sprite; enforcer_p1_arm_current_sprite_index = 0;}
                    }
                if(global.enforcer_p1_face_side == 'rite')
                    {
                        if(enforcer_p1_arm_aim == true)
                                {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_aim_idle_rite_sprite; enforcer_p1_arm_current_sprite_index = 0;}
                        if(enforcer_p1_arm_aim == false)
                                {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_idle_rite_sprite; enforcer_p1_arm_current_sprite_index = 0;}
                    }
                ///////////////////////////////////////////
                if (global.enforcer_p1_current_weapon == 1)
                    {
                        enforcer_p1_weapon_1_clip += enforcer_p1_weapon_1_reload_amount;
                    }
                if (global.enforcer_p1_current_weapon == 2)
                    {
                        enforcer_p1_weapon_2_clip += enforcer_p1_weapon_2_reload_amount;
                    }
                enforcer_p1_weapon_1_reload_check = false;
                enforcer_p1_weapon_2_reload_check = false;
                enforcer_p1_arm_current_sprite_index = 0;
                exit;
            }
    }
//////////////////////ALL RELOADING ANIMATION STUFFS IS OVER////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    {}


/////////////////////////////////////////


Keyboard Event for A-key Key:
execute code:

/////////////////////////////////////////////////////For facing left
//////////////////////////////////////////////
if (enforcer_p1_arm_sprite_animated == false)   //If player is not shooting/reloading
    {
        if (enforcer_p1_arm_aim == false)///If player is not aiming
        {
            enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_idle_left_sprite;
        }
        if (enforcer_p1_arm_aim == true)
        {
            enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_aim_idle_left_sprite;
        }
    }
//////////////////////////////////////////////

if (enforcer_p1_arm_sprite_animated == true)
    {
        if(global.enforcer_p1_face_side == 'left')
            {
                enforcer_p1_arm_face = 'left';
            }
    }

/*
if (enforcer_p1_arm_sprite_animated == true)    //If player is shooting/reloading
    {
        if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_fire_rite_sprite) //&& !(image_xscale == -1)
            {image_xscale = -1; exit;}
        if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_fire_rite_sprite) //&& !(image_xscale == -1)
            {image_xscale = -1; exit;}
    }


Keyboard Event for D-key Key:
execute code:

//////////////////////////////////////////////
if (enforcer_p1_arm_sprite_animated == false)
{
    if (enforcer_p1_arm_aim == false)///If player is not aiming
        {
            enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_idle_rite_sprite;
        }
    if (enforcer_p1_arm_aim == true)
        {
            enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_aim_idle_rite_sprite;
        }
}
////////////////////////////////////////////////////
if (enforcer_p1_arm_sprite_animated == true)
    {
        if(global.enforcer_p1_face_side == 'rite')
            {
                enforcer_p1_arm_face = 'rite';
            }
    }

/*
if (enforcer_p1_arm_sprite_animated == true)    //If player is shooting/reloading
    {
        if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_fire_left_sprite) //&& !(image_xscale == -1)
            {image_xscale = -1;exit;}
        if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_fire_left_sprite) //&& !(image_xscale == -1)
            {image_xscale = -1;exit;}
    }



Keyboard Event for K-key Key:
execute code:

if (enforcer_p1_arm_sprite_animated == false)
    {
        if (enforcer_p1_arm_aim == false)///If player is not aiming
            {
                enforcer_p1_arm_aim = true; //Gatta aim to hit, boy!
                    {
                        if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_idle_left_sprite)
                        {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_aim_idle_left_sprite;}
                        if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_idle_rite_sprite)
                        {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_aim_idle_rite_sprite;}
                    }
            }
    }
/////////////////////////////////////////////////////////////


Draw Event:
execute code:

/////////////////////////////////////////////////////////////////////////////////////
//I've noticed that the arm for handguns (pistols & revolvers) are drawn too far out of player's body. The original draw x,y numbers are meant for long guns. So this means that I'll have to implement a cheap fix for this.
temp_fix_x = 0;
temp_fix_y = 0; temp_fix_y2 = 0; if (global.enforcer_p1_is_crouching == true){temp_fix_y2 = 2}
if (global.enforcer_p1_current_weapon == 1){if (global.enforcer_p1_which_weapon_1 == 1 ^^ global.enforcer_p1_which_weapon_1==2){temp_fix_x = + 3;temp_fix_y = -1;}}
if (global.enforcer_p1_current_weapon == 2){if (global.enforcer_p1_which_weapon_2 == 1 ^^ global.enforcer_p1_which_weapon_1==2){temp_fix_x = + 3;temp_fix_y = -1;}}
/////////////////////////////////////////////////////////////////////////////////////
 
////ALWAYS DRAW THE PLAYER's arm ONSCREEN w/ current sprite while following the player the arm belongs to...
if (global.enforcer_p1_face_side == 'left') && (enforcer_p1_arm_sprite_animated == false)
        {draw_sprite(enforcer_p1_arm_current_sprite_draw,enforcer_p1_arm_current_sprite_index,(enforcer_p1_body_obj.x + -3 + (temp_fix_x)),(enforcer_p1_body_obj.y + 5 + (temp_fix_y)+(temp_fix_y2)));}

if (global.enforcer_p1_face_side == 'left') && (enforcer_p1_arm_sprite_animated == true) && (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_fire_rite_sprite || enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_fire_rite_sprite || enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_reload_rite_sprite)
        {draw_sprite_ext(enforcer_p1_arm_current_sprite_draw,enforcer_p1_arm_current_sprite_index,(enforcer_p1_body_obj.x + -3 + (temp_fix_x)),(enforcer_p1_body_obj.y + 5 + (temp_fix_y)+(temp_fix_y2)),-1,1,0,c_white,1);}

if (global.enforcer_p1_face_side == 'left') && (enforcer_p1_arm_sprite_animated == true) && (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_fire_left_sprite || enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_fire_left_sprite || enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_reload_left_sprite)
       {draw_sprite(enforcer_p1_arm_current_sprite_draw,enforcer_p1_arm_current_sprite_index,(enforcer_p1_body_obj.x + -3 + (temp_fix_x)),(enforcer_p1_body_obj.y + 5 + (temp_fix_y)+(temp_fix_y2)));}

////////////
if (global.enforcer_p1_face_side == 'rite') && (enforcer_p1_arm_sprite_animated == false)
    {
        {draw_sprite(enforcer_p1_arm_current_sprite_draw,enforcer_p1_arm_current_sprite_index,(enforcer_p1_body_obj.x + 3 + (temp_fix_x * -1)),(enforcer_p1_body_obj.y + 5 + (temp_fix_y)+(temp_fix_y2)));}
    }
if (global.enforcer_p1_face_side == 'rite') && (enforcer_p1_arm_sprite_animated == true)  && (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_fire_left_sprite || enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_fire_left_sprite || enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_reload_left_sprite)
    {
        {draw_sprite_ext(enforcer_p1_arm_current_sprite_draw,enforcer_p1_arm_current_sprite_index,(enforcer_p1_body_obj.x + 3 + (temp_fix_x * -1)),(enforcer_p1_body_obj.y + 5 + (temp_fix_y)+(temp_fix_y2)),-1,1,0,c_white,1);}
    }
if (global.enforcer_p1_face_side == 'rite') && (enforcer_p1_arm_sprite_animated == true)  && (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_fire_rite_sprite || enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_fire_rite_sprite || enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_reload_rite_sprite)
 {
         {draw_sprite(enforcer_p1_arm_current_sprite_draw,enforcer_p1_arm_current_sprite_index,(enforcer_p1_body_obj.x + 3 + (temp_fix_x * -1)),(enforcer_p1_body_obj.y + 5 + (temp_fix_y)+(temp_fix_y2)));}
 }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



Key Press Event for J-key Key:
execute code:

////////////////////////////////////////////////////////////////////////////
//Now p1 is going to fire current weapon now if rounds remain for weapon
if(enforcer_p1_arm_sprite_animated == false) && (enforcer_p1_weapon_1_clip > 0)
    {
        if(enforcer_p1_arm_aim == false)                    //If Player is hip firing
            {
               global.enforcer_p1_hip_firing = true;
               enforcer_p1_arm_sprite_animated = true;
               if (global.enforcer_p1_current_weapon == 1)  //If player is hipfiring a RITE SIDE weapon
                    {
                        if (global.enforcer_p1_face_side == 'left')     //Hipfiring to the left
                            {
                                if !(enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_fire_left_sprite)
                                    {
                                        enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_fire_left_sprite;
                                        temp_var = 0; temp_var = irandom_range(1,3); if(temp_var == 1){sound_play(enforcer_p1_arm_1_gunshot_1);}                //All for choosing which gunshot sfx variation to play
                                        if(temp_var == 2){sound_play(enforcer_p1_arm_1_gunshot_2);}if(temp_var == 3){sound_play(enforcer_p1_arm_1_gunshot_3);}  //All for choosing which gunshot sfx variation to play
                                        
                                        instance_create(x+enforcer_p1_arm_1_gunsmoke_particle_x,y+enforcer_p1_arm_1_gunsmoke_particle_y,enforcer_p1_arm_1_gunsmoke_particle);
                                        enforcer_p1_weapon_1_clip += -1; 
                                        enforcer_p1_arm_current_sprite_max_frames = sprite_get_number(enforcer_p1_arm_1_hip_fire_left_sprite);
                                        player_1_bullet_script(id,1,'left',global.enforcer_p1_is_crouching,enforcer_p1_arm_aim);  
                                        //1st is id from which player is firing, 2nd is which player's weapon is firing.
                                        //
                                        if (enforcer_p1_arm_1_operate_sound_timing != 0){alarm[0] = enforcer_p1_arm_1_operate_sound_timing;}
                                        if (enforcer_p1_arm_1_operate_particle_x != 0){alarm[1]= enforcer_p1_arm_1_operate_sound_timing;}
                                    }
                            }
                        if (global.enforcer_p1_face_side == 'rite')     //Hipfiring to the rite
                            {
                                if !(enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_hip_fire_rite_sprite)
                                    {
                                        enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_fire_rite_sprite;
                                        temp_var = 0; temp_var = irandom_range(1,3); if(temp_var == 1){sound_play(enforcer_p1_arm_1_gunshot_1);}              //All for choosing which gunshot sfx variation to play
                                        if(temp_var == 2){sound_play(enforcer_p1_arm_1_gunshot_2);}if(temp_var == 3){sound_play(enforcer_p1_arm_1_gunshot_3);}//All for choosing which gunshot sfx variation to play
                                        
                                        instance_create((x+enforcer_p1_arm_1_gunsmoke_particle_x * -1 + 12),y+enforcer_p1_arm_1_gunsmoke_particle_y,enforcer_p1_arm_1_gunsmoke_particle);
                                        enforcer_p1_weapon_1_clip += -1; 
                                        enforcer_p1_arm_current_sprite_max_frames = sprite_get_number(enforcer_p1_arm_1_hip_fire_rite_sprite);
                                        player_1_bullet_script(id,1,'rite',global.enforcer_p1_is_crouching,enforcer_p1_arm_aim);  
                                        //1st is id from which player is firing, 2nd is which player's weapon is firing.
                                        //
                                        if (enforcer_p1_arm_1_operate_sound_timing != 0){alarm[0] = enforcer_p1_arm_1_operate_sound_timing;}
                                        if (enforcer_p1_arm_1_operate_particle_x != 0){alarm[1]= enforcer_p1_arm_1_operate_sound_timing;}
                                    }
                            }
                    }
               if (global.enforcer_p1_current_weapon == 2)  //If player is hip firing a LEFT SIDE weapon
                    {
                    
                    } 
            }
        /////////////////////////////////////////////////////////////////////////////
        if(enforcer_p1_arm_aim == true)                     //If Player is aim firing
            {
               global.enforcer_p1_aim_firing = true;
               enforcer_p1_arm_sprite_animated = true;
               if (global.enforcer_p1_current_weapon == 1)  //If player is AIMfiring a RITE SIDE weapon
                    {
                        if (global.enforcer_p1_face_side == 'left')     //Aimfiring to the left
                            {
                                if !(enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_fire_left_sprite)
                                    {
                                        enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_aim_fire_left_sprite;
                                        temp_var = 0; temp_var = irandom_range(1,3); if(temp_var == 1){sound_play(enforcer_p1_arm_1_gunshot_1);}                //All for choosing which gunshot sfx variation to play
                                        if(temp_var == 2){sound_play(enforcer_p1_arm_1_gunshot_2);}if(temp_var == 3){sound_play(enforcer_p1_arm_1_gunshot_3);}  //All for choosing which gunshot sfx variation to play
                                        
                                        instance_create(x+enforcer_p1_arm_1_gunsmoke_particle_x,y+enforcer_p1_arm_1_gunsmoke_particle_y,enforcer_p1_arm_1_gunsmoke_particle);
                                        enforcer_p1_weapon_1_clip += -1; 
                                        enforcer_p1_arm_current_sprite_max_frames = sprite_get_number(enforcer_p1_arm_1_aim_fire_left_sprite);
                                        player_1_bullet_script(id,1,'left',global.enforcer_p1_is_crouching,enforcer_p1_arm_aim);  
                                        //1st is id from which player is firing, 2nd is which player's weapon is firing.
                                        if (enforcer_p1_arm_1_operate_sound_timing != 0){alarm[0] = enforcer_p1_arm_1_operate_sound_timing * 4;}
                                        if (enforcer_p1_arm_1_operate_particle_x != 0){alarm[1]= enforcer_p1_arm_1_operate_sound_timing;}
                                    }
                            }
                            ////////////////////////////////////////END AIMFIRING TO THE LEFT
                        if (global.enforcer_p1_face_side == 'rite')     //Aimfiring to the rite
                            {
                                if !(enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_fire_rite_sprite)
                                    {
                                        enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_aim_fire_rite_sprite;
                                        temp_var = 0; temp_var = irandom_range(1,3); if(temp_var == 1){sound_play(enforcer_p1_arm_1_gunshot_1);}              //All for choosing which gunshot sfx variation to play
                                        if(temp_var == 2){sound_play(enforcer_p1_arm_1_gunshot_2);}if(temp_var == 3){sound_play(enforcer_p1_arm_1_gunshot_3);}//All for choosing which gunshot sfx variation to play
                                        
                                        instance_create((x+enforcer_p1_arm_1_gunsmoke_particle_x * -1),y+enforcer_p1_arm_1_gunsmoke_particle_y,enforcer_p1_arm_1_gunsmoke_particle);
                                        enforcer_p1_weapon_1_clip += -1; 
                                        enforcer_p1_arm_current_sprite_max_frames = sprite_get_number(enforcer_p1_arm_1_aim_fire_rite_sprite);
                                        player_1_bullet_script(id,1,'rite',global.enforcer_p1_is_crouching,enforcer_p1_arm_aim);  
                                        //1st is id from which player is firing, 2nd is which player's weapon is firing.
                                        if (enforcer_p1_arm_1_operate_sound_timing != 0){alarm[0] = enforcer_p1_arm_1_operate_sound_timing * 4;}
                                        if (enforcer_p1_arm_1_operate_particle_x != 0){alarm[1]= enforcer_p1_arm_1_operate_sound_timing;}
                                    }
                            }
                    }//////////////////////////////END RITE SIDE AIM FIRING WEAPON
                    
            }//////////////////////////////END AIM FIRING
    }
////////////////////////////////////////////////////////////////////////////


Key Press Event for R-key Key:
execute code:

/////////////////////////////////////////////////////////////
//Welcome to the reloading key. Let's hope this works as intended.
/////////////////////////////////////////////////////////////
if (enforcer_p1_arm_sprite_animated == false)
    {
        //If reloading rite side weapon
        if (global.enforcer_p1_current_weapon == 1)
            {
                //enforcer_p1_weapon_1_clip >
                enforcer_p1_reload_check_script(1,id,global.enforcer_p1_which_weapon_1);   //This is the check to see if there's ammo to reload with. If it passes, reload will occur
                if (enforcer_p1_weapon_1_clip < global.enforcer_p1_weapon_1_clip) && (enforcer_p1_weapon_1_reload_check == true)
                    {
                        enforcer_p1_arm_sprite_animated = true;
                        if (global.enforcer_p1_face_side == 'left')
                            {
                                enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_reload_left_sprite;
                                enforcer_p1_arm_current_sprite_max_frames = sprite_get_number(enforcer_p1_arm_1_reload_left_sprite);
                            }
                        if (global.enforcer_p1_face_side == 'rite')
                            {
                                enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_reload_rite_sprite;
                                enforcer_p1_arm_current_sprite_max_frames = sprite_get_number(enforcer_p1_arm_1_reload_rite_sprite);
                            }
                        global.enforcer_p1_is_reloading = true;
                    }
            }
        ///////////////////////////////////////End RITE SIDE WEAPON////////////////
        //If reloading left side weapon
        if (global.enforcer_p1_current_weapon == 2)
            {
                enforcer_p1_reload_check_script(2,id,global.enforcer_p1_which_weapon_2);   //This is the check to see if there's ammo to reload with. If it passes, reload will occur
                    if (enforcer_p1_weapon_2_clip < global.enforcer_p1_weapon_2_clip) && (enforcer_p1_weapon_2_reload_check == true)
                        {
                            enforcer_p1_arm_sprite_animated = true;
                        if (global.enforcer_p1_face_side == 'left')
                            {
                                enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_2_reload_left_sprite;
                                enforcer_p1_arm_current_sprite_max_frames = sprite_get_number(enforcer_p1_arm_2_reload_left_sprite);
                            }
                        if (global.enforcer_p1_face_side == 'rite')
                            {
                                enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_2_reload_rite_sprite;
                                enforcer_p1_arm_current_sprite_max_frames = sprite_get_number(enforcer_p1_arm_2_reload_rite_sprite);
                            }
                            global.enforcer_p1_is_reloading = true;
                        }
            }
///////////////////////////////////////END RELOADING//////////////////////////////////////////////////
    }

    
    
    
    
    
    
    
    
    
    
    
    


Key Release Event for K-key Key:
execute code:

//if (enforcer_p1_arm_sprite_animated == false)
    {
        if (enforcer_p1_arm_aim == true)///If player was aiming previously
            {
                enforcer_p1_arm_aim = false; //Gatta aim to hit, boy!
                        if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_idle_left_sprite)  //If player was aiming left
                            {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_idle_left_sprite;}
                        if (enforcer_p1_arm_current_sprite_draw == enforcer_p1_arm_1_aim_idle_rite_sprite)  //If player was aiming rite
                            {enforcer_p1_arm_current_sprite_draw = enforcer_p1_arm_1_hip_idle_rite_sprite;}
            }
    }
/////////////////////////////////////////////////////////////

